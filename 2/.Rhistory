present$boys / total
sum(present$boys )/ total
sum(present$girls )/ total
sum(present$boys )/ total > sum(present$girls )/ total
# 4)
plot(present$year, present$girls / present$boys)
?plot
# 4)
plot(present$year, present$girls / present$boys, typle="b")
?plot
# 4)
plot(present$year, present$girls / present$boys, type="b")
# 4)
plot(present$year, present$girls / present$boys)
# 4)
plot(present$year, present$girls / present$boys,type="l")
# 4)
plot(present$year, present$girls / present$boys)
arbuthnot$b'oy
a
''
#5)
max(present$boys + present$girls)
#5)
present$year[max(present$boys + present$girls)]
subset(present$year, present$boys + present$girls=max(present$boys + present$girls))
subset(present$year, present$boys + present$girls==max(present$boys + present$girls))
View(present)
View(present)
download.file("http://www.openintro.org/stat/data/kobe.RData", destfile = "kobe.RData")
load("kobe.RData")
head(kobe)
head(kobe)
kobe$basket[1:9]
kobe_streak <- calc_streak(kobe)
kobe_streak <- calc_streak(kobe$basket)
barplot(table(kobe_streak))
kobe
head(kobe)
kobe$basket
kobe$basket[1:9]
?print
?c
?sample
outcomes <- c("heads", "tails")
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 10, replace = TRUE)
sample(outcomes, size = 10, replace = FALSE)
sample(outcomes, size = 2, replace = FALSE)
sample(outcomes, size = 2, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
source('~/Desktop/Matérias/Estatística/Laboratórios/2/ex-2.R', echo=TRUE)
source('~/Desktop/Matérias/Estatística/Laboratórios/2/ex-2.R', echo=TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE)
table(sim_fair_coin)
barplot(table(sim_fair_coin))
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE, prob=c(0.2,0.8))
barplot(table(sim_fair_coin))
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE, prob=c(0.2,0.8))
barplot(table(sim_fair_coin))
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE, prob=c(0.2,0.8))
barplot(table(sim_fair_coin))
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE, prob=c(0.2,0.8))
barplot(table(sim_fair_coin))
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE, prob=c(0.1,0.9))
barplot(table(sim_fair_coin))
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE, prob=c(0.1,0.9))
barplot(table(sim_fair_coin))
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 1, replace = TRUE,prob=c(0.45,0.55))
barplot(table(sim_basket))
sim_basket <- sample(outcomes, size = 1, replace = TRUE,prob=c(0.45,0.55))
sim_basket <- sample(outcomes, size = 133, replace = TRUE,prob=c(0.45,0.55))
barplot(table(sim_basket))
barplot(table(sim_basket))
sim_basket <- sample(outcomes, size = 133, replace = TRUE,prob=c(0.45,0.55))
barplot(table(sim_basket))
sim_basket <- sample(outcomes, size = 133, replace = TRUE,prob=c(0.45,0.55))
barplot(table(sim_basket))
sim_basket <- sample(outcomes, size = 133, replace = TRUE,prob=c(0.45,0.55))
barplot(table(sim_basket))
sim_basket <- sample(outcomes, size = 133, replace = TRUE,prob=c(0.45,0.55))
barplot(table(sim_basket))
barplot(table(sim_basket))
sim_basket <- sample(outcomes, size = 133, replace = TRUE,prob=c(0.45,0.55))
barplot(table(sim_basket))
kobe_basket
kobe$basket
sim_basket
barplot(table(kobe_basket))
barplot(table(kobe$basket))
barplot(table(sim_basket))
barplot(table(kobe$basket))
sim_basket <- sample(outcomes, size = 133, replace = TRUE,prob=c(0.45,0.55))
barplot(table(sim_basket))
barplot(table(kobe$basket))
#Utilizando a função calc_streak, calcule o comprimento das sequências do vetor sim_basket.
calc_streak(sim_basket)
#Sequência típica seria a moda?
mode(sim_basket)
#Sequência típica seria a moda?
mode(calc_streak(sim_basket))
getmode(calc_streak(sim_basket))
r a moda. R não tem uma função pre-definida.
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(calc_streak(sim_basket))
getmode(calc_streak(sim_basket))
calc_streak(sim_basket)
#Dá zero e fica sem graça. Vamos remover as sequências zeradas do espaço para ver algum número
getmode(subset(calc_streak(sim_basket),calc_streak!=0))
?subset
#Dá zero e fica sem graça. Vamos remover as sequências zeradas do espaço para ver algum número
getmode(calc_streak(sim_basket)[!=0])
#Dá zero e fica sem graça. Vamos remover as sequências zeradas do espaço para ver algum número
getmode(calc_streak(sim_basket)[calc_streak(sim_basket)!=0])
calc_streak(sim_subset)
calc_streak(sim_basket)
#Dá zero e fica sem graça. Vamos remover as sequências zeradas do espaço para ver algum número
getmode(seqs_sim[seqs_sim!=0])
#Utilizando a função calc_streak, calcule o comprimento das sequências do vetor sim_basket.
seqs_sim <-calc_streak(sim_basket)
#Dá zero e fica sem graça. Vamos remover as sequências zeradas do espaço para ver algum número
getmode(seqs_sim[seqs_sim!=0])
calc_streak(sim_basket)
calc_streak(seqs_sim)
seqs_sim
#aproveitar e calcular a do kobe também
seqs_kobe <-calc_streak(kobe$basket)
seqs_kobe
#Dá zero e fica sem graça. Vamos remover as sequências zeradas do espaço para ver algum número
getmode(seqs_sim[seqs_sim!=0])
#Quão longa é a sequência mais longa de cestas em 133 arremessos?
max(seqs_sim)
#----
summary(kobe$basket)
#----
describe(kobe$basket)
#----
summary?
#----
?summary
#----
?summary
#----
anova(kobe$basket)
#----
mean(kobe$basket)
#----
mean(seqs_kobe)
mean(seqs_sim)
median(seqs_sim)
median(seqs_kobe)
#----
seqs_kobe
seqs_sim
sort(seqs_sim)
#----
sort(seqs_kobe)
summary(seqs_kobe)
summary(seqs_sim)
#----
summary(seqs_sim)
summary(seqs_kobe)
#Utilizando a função calc_streak, calcule o comprimento das sequências do vetor sim_basket.
seqs_sim <-calc_streak(sim_basket)
#----
summary(seqs_sim)
summary(seqs_kobe)
#----
summary(seqs_sim)
summary(seqs_kobe)
boxplot(seqs_sim,seqs_kobe)
?boxplot
#----  Olhando os sumários e os boxplots (ou apenas o boxplot), podemos ver que
summary(seqs_sim)
summary(seqs_kobe)
boxplot(seqs_sim,seqs_kobe)
barplot(seqs_sim,seqs_kobe)
barplot(seqs_sim)
seqs_kobe
barplot(seqs_sim,seqs_kobe)
box
boxplot(seqs_sim,seqs_kobe)
#----  Olhando os sumários e os boxplots (ou apenas o boxplot), podemos ver que os arremessos do Kobe são sumarizados de forma
#semelhante ao modelo de eventos independentes. Execeto pelos outliers ()
summary(seqs_sim)
#Plotando o script em .PDF
setwd("/home/naelsondouglas/Desktop/Matérias/Estatística/Laboratórios/2")
rmarkdown::render("ex-2.R")
download.file("http://www.openintro.org/stat/data/kobe.RData", destfile = "kobe.RData")
download.file("http://www.openintro.org/stat/data/kobe.RData", destfile = "kobe.RData")
rmarkdown::render("ex-2.R")
rmarkdown::render("ex-2.R")
rmarkdown::render("ex-2.R")
#Plotando o script em .PDF
#setwd("/home/naelsondouglas/Desktop/Matérias/Estatística/Laboratórios/2")
rmarkdown::render("ex-2.R")
#Plotando o script em .PDF
#setwd("/home/naelsondouglas/Desktop/Matérias/Estatística/Laboratórios/2")
rmarkdown::render("ex-2.R")
rmarkdown::render("ex-2.R")
rmarkdown::render("ex-2.R")
rmarkdown::render("ex-2.R")
print("Muito parecidas. Nâo idênticas, porém parecidas. Os espaços amostrais teriam a mesma dimensão e seriam simulados com as mesmas probabilidades, logo seriam muito semelhantes")
print("Olhando os sumários e os boxplots (ou apenas o boxplot), podemos ver que os arremessos do Kobe são sumarizados de forma
semelhante ao modelo de eventos independentes. Só os outliers(Max) que são um pouco diferentes, mas como o nome já diz: eles são outliers.
Os quartis dentro dos boxplots se encaixam perfeitamente")
# 4. Quais conceitos do livro são abordados neste laboratório? Quais conceitos, se houver algum, que
# não são abordados no livro? Você viu esses conceito em algum outro lugar, p.e., aulas, seções de
# discussão, laboratórios anteriores, ou tarefas de casa? Seja específico em sua resposta.
print("Questão pedindo feedback do livro Openintro. Eu estudei pelo kuvri do Marcos Magalhães, então não tem como dar feedback do openintro")
rmarkdown::render("ex-2.R")
rmarkdown::render("ex-2.R")
rmarkdown::render("ex-2.R")
rmarkdown::render("ex-2.R")
rmarkdown::render("ex-2.R")
?rmarkdown::render
rmarkdown::render("ex-2.R",output="pdf")
rmarkdown::render("ex-2.R",output="pdf_document")
rmarkdown::render("ex-2.R",output=pdf_document)
rmarkdown::render("ex-2.R",output_format="pdf_document")
rmarkdown::render("ex-2.R",output_format="pdf_document")
rmarkdown::render("ex-2.R",output_format="pdf_document")
rmarkdown::render("ex-2.R",output_format="pdf_document")
source('~/Desktop/Matérias/Estatística/Laboratórios/3/ex-3.R', echo=TRUE)
download.file("http://www.openintro.org/stat/data/bdims.RData", destfile = "bdims.RData")
download.file("http://www.openintro.org/stat/data/bdims.RData", destfile = "bdims.RData")
load("bdims.RData")
load("bdims.RData")
head(bdins)
head(bdims)
fdims <- subset(bdims, bdims$sex == 0)
mdims <- subset(bdims, bdims$sex == 1)
histogram(table(mdims))
hist(table(mdims))
hist(mdims)
mdims
hist(mdims$hgt)
hist(fmdims$hgt)
hist(fdims$hgt)
hist(fmdims$hgt)
hist(fmdims$hgt)
hist(mdims$hgt)
fhgtmean <- mean(fdims$hgt)
fhgtsd <- sd(fdims$hgt)
hist(fdims$hgt, probability = TRUE)
x <- 140:190
y <- dnorm(x = x, mean = fhgtmean, sd = fhgtsd)
y
hist(y)
lines(x = x, y = y, col = "blue")
?lines
lines(x = x, y = y, col = "blue")
hist(fdims$hgt, probability = TRUE)
lines(x = x, y = y, col = "blue")
lines(x = x, y = y, col = "blue")
qqnorm(fdims$hgt)
qqline(fdims$hgt)
sim_norm <- rnorm(n = length(fdims$hgt), mean = fhgtmean, sd = fhgtsd)
hist(sim_norm)
qqnorm(sim_norm)
qqline(sim_norm)
plot(1)
qqline(sim_norm)
qqnorm(sim_norm)
fwgt <- fdims$wgt
fwgt
hist(fwgt <- fdims$wgt)
hist(fwgt)
mwft <- mdims$wgt
hist(mwgt)
mwgt <- mdims$wgt
fwgt <- fdims$wgt
hist(mwgt)
lines(mwgt)
lines(hist(mwgt))
lines(hist(fwgt))
lines(mwgt)
qqnoem(fwgt)
qqnorm(fwgt)
qqline(fwgt)
sim_norm
qqline(sim_norm)
qqplot(sim_norm)
qqnorm(sim_norm)
qqline(sim_norm)
qqnormsim(fdims$hgt)
1 - pnorm(q = 182, mean = fhgtmean, sd = fhgtsd)
pnorm(q = 182, mean = fhgtmean, sd = fhgtsd)
hist(fdims$hgt)
hist(mdims$hgt)
hist(fdims$hgt)
lines(mdims$hgt)
hist(mdims$hgt)
hist(fdims$hgt)
hist(mdims$hgt)
hist(mdims$hgt, probability = TRUE)
hist(mdims$hgt)
hist(mdims$hgt, probability = TRUE)
x <- 140:190
y <- dnorm(x = x, mean = fhgtmean, sd = fhgtsd)
lines(x = x, y = y, col = "blue")
x <- 140:190
y <- dnorm(x = x, mean = fhgtmean, sd = fhgtsd)
lines(x = x, y = y, col = "blue")hist(fdims$hgt, probability = TRUE)
hist(fdims$hgt, probability = TRUE)
x <- 140:190
y <- dnorm(x = x, mean = fhgtmean, sd = fhgtsd)
lines(x = x, y = y, col = "blue")hist(fdims$hgt, probability = TRUE)
hist(fdims$hgt, probability = TRUE)
x <- 140:190
y <- dnorm(x = x, mean = fhgtmean, sd = fhgtsd)
lines(x = x, y = y, col = "blue")
sim_norm <- rnorm(n = length(fdims$hgt), mean = fhgtmean, sd = fhgtsd)
hist(sim_norm)
sim_norm <- rnorm(n = length(fdims$hgt), mean = fhgtmean, sd = fhgtsd)
hist(sim_norm)
hist(sim_norm,breaks = 100)
sim_norm <- rnorm(n = length(fdims$hgt), mean = fhgtmean, sd = fhgtsd)
hist(sim_norm,breaks = 100)
hist(sim_norm,breaks = 20)
hist(sim_norm,breaks = 10)
hist(sim_norm,breaks = 15)
hist(sim_norm,breaks = 19)
hist(sim_norm,breaks = 19)
hist(sim_norm,breaks = 51)
hist(sim_norm,breaks = 21)
hist(sim_norm,breaks = 27)
hist(sim_norm,breaks = 25)
hist(sim_norm,breaks = 23)
hist(sim_norm,breaks = 24)
hist(sim_norm,breaks = 23)
hist(sim_norm,breaks = 46)
hist(sim_norm,breaks = 92)
hist(sim_norm,breaks = 184)
hist(sim_norm,breaks = 184/2)
hist(sim_norm,breaks = 184/4)
hist(sim_norm,breaks = 184/8)
?pnorm
hist(fdims$kne.di)
hist(fdims$kne.di)
hist(fdims$kne.di, breaks=16)
hist(fdims$kne.di, breaks=64)
hist(fdims$kne.di, breaks=32)
hist(fdims$kne.di, breaks=16)
hist(fdims$kne.di, breaks=32)
hist(fdims$kne.di, breaks=32, probability = TRUE)
hist(fdims$kne.di, breaks=32)
y <- dnorm(x=x,sd=sd(fdims$kne.di),mean=mean(fdims$kne.di))
lines(x,y)
lines(x=x,y=y)
x_ <-length(fdims$kne.di)
y_ <- dnorm(x=x,sd=sd(fdims$kne.di),mean=mean(fdims$kne.di))
x_
y_
y_ <- dnorm(x=x_,sd=sd(fdims$kne.di),mean=mean(fdims$kne.di))
y_
fknedi = mean(fdims$kne.di)
fknesd = sd(fdims$kne.di)
fknemean = mean(fdims$kne.di)
y_ <- dnorm(x=x_,  sd=fknesd  ,mean=fknemean)
fdims$kne.di
sort(fdims$kne.di)
enumerate
x_ <-fdims$kne.di
fknemean = mean(fdims$kne.di)
fknesd = sd(fdims$kne.di)
y_ <- dnorm(x=x_,  sd=fknesd  ,mean=fknemean)
lines(x=x_,y=y_)
hist(fdims$kne.di, breaks=32, probability = TRUE)
x_ <-fdims$kne.di
fknemean = mean(fdims$kne.di)
fknesd = sd(fdims$kne.di)
y_ <- dnorm(x=x_,  sd=fknesd  ,mean=fknemean)
lines(x=x_,y=y_)
lines(x=x_,y=y_)
lines(x=x_,y=y_)
lines(x=x_,y=y_,col="red")
hist(fdims$kne.di, breaks=32, probability = TRUE)
lines(x=x_,y=y_,col="red")
lines(x=x_,y=y_,col="blue")
hist(fdims$kne.di, breaks=32, probability = TRUE)
x_ <-sort(fdims$kne.di)
hist(fdims$kne.di, breaks=32, probability = TRUE)
x_ <-sort(fdims$kne.di)
fknemean = mean(fdims$kne.di)
fknesd = sd(fdims$kne.di)
y_ <- dnorm(x=x_,  sd=fknesd  ,mean=fknemean)
lines(x=x_,y=y_,col="blue")
symmetry
qqnorm(fdims$kne.di)
qqline(fdims$kne.di)
hist(fdims$kne.di, breaks=32, probability = TRUE)
lines(x=x_,y=y_,col="blue")
boxplot(fdims$kne.di)
hist(fdims$kne.di[!fdims$kne.di %in% boxplot.stats(fdims$kne.di)$out])
hist(fdims$kne.di[!fdims$kne.di %in% boxplot.stats(fdims$kne.di)$out], probability = TRUE)
x_ <-sort(fdims$kne.di)
fknemean = mean(fdims$kne.di)
fknesd = sd(fdims$kne.di)
y_ <- dnorm(x=x_,  sd=fknesd  ,mean=fknemean)
lines(x=x_,y=y_,col="blue")
qqnorm(fdims$kne.di)
qqline(fdims$kne.di)
hist(fdims$kne.di[!fdims$kne.di %in% boxplot.stats(fdims$kne.di)$out], probability = TRUE)
x_ <-sort(fdims$kne.di)
fknemean = mean(fdims$kne.di)
fknesd = sd(fdims$kne.di)
y_ <- dnorm(x=x_,  sd=fknesd  ,mean=fknemean)
lines(x=x_,y=y_,col="blue")
hist(fdims$kne.di[!fdims$kne.di %in% boxplot.stats(fdims$kne.di)$out], breaks = 32,probability = TRUE)
x_ <-sort(fdims$kne.di)
fknemean = mean(fdims$kne.di)
fknesd = sd(fdims$kne.di)
y_ <- dnorm(x=x_,  sd=fknesd  ,mean=fknemean)
lines(x=x_,y=y_,col="blue")
hist(fdims$kne.di[!fdims$kne.di %in% boxplot.stats(fdims$kne.di)$out], breaks = 16,probability = TRUE)
hist(fdims$kne.di, breaks=16, probability = TRUE)
hist(fdims$kne.di[!fdims$kne.di %in% boxplot.stats(fdims$kne.di)$out], breaks = 16,probability = TRUE)
x_ <-sort(fdims$kne.di)
fknemean = mean(fdims$kne.di)
fknesd = sd(fdims$kne.di)
y_ <- dnorm(x=x_,  sd=fknesd  ,mean=fknemean)
lines(x=x_,y=y_,col="blue")
x <- power(2)
x
x(3)
x <- 1:100
x <- x^2
x
hist(x)
qqnorm(x)
x
qqlines(x)
qqline(x)
qqline(x,col="blue")
hist(x, probability =  TRUE)
lines(x)
x <- 1:1000
hist(x)
x
x ,_ x^2
x <- x^2
hist(x)
fage <- fdims$age
hist(fage)
qqnorm(fage)
qqline(fage)
fage
sorte(fage)
sort(fage)
?qqline
fdims$bia.di
hist(fdims$bia.di)
qqnorm(fdims$bia.di)
qqline(fdims$bia.di)
hist(fdims$elb.di)
qqnorm(fdims$elb.di)
qqline(fdims$elb.di)
qqline(fdims$bia.di)
qqnorm(fdims$bia.di)
qqline(fdims$bia.di)
qqnorm(fdims$elb.di)
qqline(fdims$elb.di)
bdims$age
hist(bdims$age)
qqnorm(bdims$age)
qqline(bdims$age)
hist(bdims$che.de)
qqnorm(bdims$che.de)
qqline(bdims$che.de)
